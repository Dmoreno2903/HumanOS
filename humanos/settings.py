"""
Django settings for humanos project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta

from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(".env")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", default=True)
ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", default="localhost").split(",")

# CORS: Configuraci贸n para controlar el acceso de otros dominios
CORS_ALLOW_ALL_ORIGINS = os.environ.get("CORS_ALLOW_ALL_ORIGINS", default=False)
CORS_ALLOW_CREDENTIALS = os.environ.get("CORS_ALLOW_CREDENTIALS", default=True)

CORS_ALLOWED_ORIGINS = os.environ.get("CORS_ALLOWED_ORIGINS").split(",")
CSRF_TRUSTED_ORIGINS = os.environ.get("CSRF_TRUSTED_ORIGINS").split(",")


# Application definition
INTERNAL_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

EXTERNAL_APPS = [
    "allauth",
    "allauth.account",
    "allauth.usersessions",
    "allauth.socialaccount",
    "rest_framework",
    "rest_framework.authtoken",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    "corsheaders",
    "django_extensions",
]

BUSINESS_APPS = ["people", "work_us", "doc_gen", "whatsapp"]

INSTALLED_APPS = INTERNAL_APPS + EXTERNAL_APPS + BUSINESS_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "django.middleware.locale.LocaleMiddleware",
]

ROOT_URLCONF = "humanos.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

WSGI_APPLICATION = "humanos.wsgi.application"
AUTH_USER_MODEL = "people.Person"


LOGIN_METHODS = {"username", "email"}
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.BasicAuthentication",
        "dj_rest_auth.jwt_auth.JWTCookieAuthentication",
    ),
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),  # Duraci贸n del token de acceso
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),  # Duraci贸n del token de refresco
    "ROTATE_REFRESH_TOKENS": True,  # Generar un nuevo refresh token al usarlo
    "BLACKLIST_AFTER_ROTATION": True,  # Invalidar el refresh token antiguo
    "ALGORITHM": os.environ.get(
        "ALGORITHM"
    ),  # Algoritmo de encriptaci贸n (HS256 por defecto)
    "SIGNING_KEY": SECRET_KEY,  # Clave secreta para firmar los tokens
    "AUTH_HEADER_TYPES": ("Bearer",),  # Tipo de token en el encabezado Authorization
    "USER_ID_FIELD": os.environ.get(
        "USER_ID_FIELD"
    ),  # Campo del usuario que se incluye en el token
    "USER_ID_CLAIM": os.environ.get(
        "USER_ID_CLAIM"
    ),  # Nombre del campo en el token JWT
    "AUTH_TOKEN_CLASSES": (
        "rest_framework_simplejwt.tokens.AccessToken",
        "rest_framework_simplejwt.tokens.RefreshToken",
    ),
    "TOKEN_TYPE_CLAIM": os.environ.get(
        "TOKEN_TYPE_CLAIM"
    ),  # Nombre del campo en el token JWT
}

REST_USE_JWT = True
REST_AUTH = {
    "USE_JWT": True,
    "JWT_AUTH_COOKIE": os.environ.get(
        "JWT_AUTH_COOKIE"
    ),  # Nombre de la cookie para el token de acceso
    "JWT_AUTH_REFRESH_COOKIE": os.environ.get(
        "JWT_AUTH_REFRESH_COOKIE"
    ),  # Nombre de la cookie para el token de refresco
    "JWT_AUTH_SAMESITE": "Lax",  # Control de SameSite para las cookies
    "JWT_AUTH_SECURE": False,  # Marcar las cookies como seguras
    "JWT_AUTH_HTTPONLY": False,  # Marcar las cookies como solo lectura
}

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("POSTGRES_DB", "humanos_db"),
        "USER": os.environ.get("POSTGRES_USER", "humanos_user"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD", "humanos_password"),
        "HOST": os.environ.get("POSTGRES_HOST", "db"),
        "PORT": os.environ.get("POSTGRES_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",  # noqa: E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY")

WHATSAPP_VERIFY_TOKEN = os.environ.get("WHATSAPP_VERIFY_TOKEN")
WHATSAPP_API_TOKEN = os.environ.get("WHATSAPP_API_TOKEN")
BUSSINESS_PHONE_NUMBER_ID = os.environ.get("BUSSINESS_PHONE_NUMBER_ID")